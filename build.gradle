buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    configurations.classpath {
        resolutionStrategy {
            cacheDynamicVersionsFor 0, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }
    dependencies {
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
    }
}

apply plugin: 'jacoco'
apply plugin: org.kt3k.gradle.plugin.CoverallsPlugin


def javaProjects() {
    subprojects.findAll {
        new File(it.projectDir, 'src').directory
    }
}

allprojects {
    group = 'com.imperva.shcf4j'
    version = VERSION + (Boolean.valueOf(System.getProperty("snapshot")) ? "-SNAPSHOT" : "")
    status = 'Integration'
    repositories {
        jcenter()
    }
}

configure(javaProjects()) {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    javadoc.failOnError = false

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html4', true)
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }
}

wrapper {
    gradleVersion = '4.10.2'
}


def publishedProjects = javaProjects()

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(publishedProjects.test)
    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData = files(publishedProjects.jacocoTestReport.executionData)
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    jacocoReportPath "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    dependsOn jacocoRootReport
}